import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

type Difficulty = 'Easy' | 'Medium' | 'Hard';

interface Task {
  id: number;
  title: string;
  description: string;
  difficulty: Difficulty;
  answer: string;
  userAnswer?: string;
  completed?: boolean;
}

const tasks: Task[] = [
  {
    id: 1,
    title: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å',
    description: '–°–ª–æ–Ω –≤–µ—Å–∏—Ç 5000 –∫–≥, –∞ –±–µ–≥–µ–º–æ—Ç - 3200 –∫–≥. –ù–∞ —Å–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤ —Å–ª–æ–Ω —Ç—è–∂–µ–ª–µ–µ –±–µ–≥–µ–º–æ—Ç–∞?',
    difficulty: 'Easy',
    answer: '1800'
  },
  {
    id: 2,
    title: '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –¥–ª–∏–Ω—ã',
    description: '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–æ–º–∞ –¥–æ —à–∫–æ–ª—ã 2 –∫–º 350 –º. –°–∫–æ–ª—å–∫–æ —ç—Ç–æ –º–µ—Ç—Ä–æ–≤?',
    difficulty: 'Easy',
    answer: '2350'
  },
  {
    id: 3,
    title: '–û–±—ä—ë–º –∏ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
    description: '–í –∞–∫–≤–∞—Ä–∏—É–º –≤–ª–∏–ª–∏ 15 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã, –∑–∞—Ç–µ–º –µ—â—ë 8500 –º–ª. –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤–æ–¥—ã –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ? –û—Ç–≤–µ—Ç –¥–∞–π –≤ –ª–∏—Ç—Ä–∞—Ö.',
    difficulty: 'Medium',
    answer: '23.5'
  },
  {
    id: 4,
    title: '–í—Ä–µ–º—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å',
    description: '–ü–æ–µ–∑–¥ –¥–≤–∏–∂–µ—Ç—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 75 –∫–º/—á. –ó–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ–Ω –ø—Ä–µ–æ–¥–æ–ª–µ–µ—Ç 300 –∫–º? –û—Ç–≤–µ—Ç –¥–∞–π –≤ —á–∞—Å–∞—Ö.',
    difficulty: 'Medium',
    answer: '4'
  },
  {
    id: 5,
    title: '–ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞',
    description: '–î–ª–∏–Ω–∞ —É—á–∞—Å—Ç–∫–∞ 25 –º, —à–∏—Ä–∏–Ω–∞ 16 –º. –ù–∞–π–¥–∏ –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö.',
    difficulty: 'Medium',
    answer: '400'
  },
  {
    id: 6,
    title: '–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—ã',
    description: '–ë–∞—Å—Å–µ–π–Ω –≤–º–µ—â–∞–µ—Ç 72 –∫—É–±–æ–º–µ—Ç—Ä–∞ –≤–æ–¥—ã. –ß–µ—Ä–µ–∑ –æ–¥–Ω—É —Ç—Ä—É–±—É –æ–Ω –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ 6 —á–∞—Å–æ–≤, —á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é - –∑–∞ 9 —á–∞—Å–æ–≤. –ó–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–ª–Ω–∏—Ç—Å—è –±–∞—Å—Å–µ–π–Ω, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –æ–±–µ —Ç—Ä—É–±—ã? –û—Ç–≤–µ—Ç –æ–∫—Ä—É–≥–ª–∏ –¥–æ –¥–µ—Å—è—Ç—ã—Ö.',
    difficulty: 'Hard',
    answer: '3.6'
  },
  {
    id: 7,
    title: '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏',
    description: '–°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤ 2 —á–∞—Å–∞—Ö 35 –º–∏–Ω—É—Ç–∞—Ö 20 —Å–µ–∫—É–Ω–¥–∞—Ö?',
    difficulty: 'Hard',
    answer: '9320'
  },
  {
    id: 8,
    title: '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∏ –º–∞—Å—Å–∞',
    description: '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∂–µ–ª–µ–∑–∞ 7800 –∫–≥/–º¬≥. –ù–∞–π–¥–∏ –º–∞—Å—Å—É –∂–µ–ª–µ–∑–Ω–æ–≥–æ –∫—É–±–∞ —Å —Ä–µ–±—Ä–æ–º 0,5 –º. –û—Ç–≤–µ—Ç –¥–∞–π –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.',
    difficulty: 'Hard',
    answer: '975'
  }
];

const Index = () => {
  const [selectedDifficulty, setSelectedDifficulty] = useState<Difficulty | 'All'>('All');
  const [taskList, setTaskList] = useState<Task[]>(tasks);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackName, setFeedbackName] = useState('');
  const [feedbackEmail, setFeedbackEmail] = useState('');
  const [feedbackMessage, setFeedbackMessage] = useState('');
  const { toast } = useToast();

  const filteredTasks = selectedDifficulty === 'All' 
    ? taskList 
    : taskList.filter(task => task.difficulty === selectedDifficulty);

  const completedCount = taskList.filter(t => t.completed).length;
  const progressPercent = (completedCount / taskList.length) * 100;

  const handleAnswerChange = (taskId: number, answer: string) => {
    setTaskList(prev => prev.map(task => 
      task.id === taskId ? { ...task, userAnswer: answer } : task
    ));
  };

  const checkAnswer = (taskId: number) => {
    const task = taskList.find(t => t.id === taskId);
    if (!task) return;

    const isCorrect = task.userAnswer?.trim() === task.answer;
    
    if (isCorrect) {
      setTaskList(prev => prev.map(t => 
        t.id === taskId ? { ...t, completed: true } : t
      ));
      toast({
        title: 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!',
        description: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.',
      });
    } else {
      toast({
        title: 'üòî –ù–µ–≤–µ—Ä–Ω–æ',
        description: '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å —Ä–∞—Å—á—ë—Ç—ã.',
        variant: 'destructive'
      });
    }
  };

  const handleFeedbackSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    toast({
      title: '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!',
      description: '–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
    });
    setFeedbackName('');
    setFeedbackEmail('');
    setFeedbackMessage('');
  };

  const difficulties: Array<Difficulty | 'All'> = ['All', 'Easy', 'Medium', 'Hard'];
  const difficultyLabels = {
    'All': '–í—Å–µ',
    'Easy': '–õ—ë–≥–∫–∏–π',
    'Medium': '–°—Ä–µ–¥–Ω–∏–π',
    'Hard': '–°–ª–æ–∂–Ω—ã–π'
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-muted/30 via-background to-secondary/10">
      <section className="relative overflow-hidden bg-gradient-to-r from-primary via-secondary to-accent py-20 px-4">
        <div className="absolute inset-0 opacity-10">
          <div className="absolute top-10 left-10 w-32 h-32 bg-white rounded-full blur-3xl"></div>
          <div className="absolute bottom-10 right-10 w-40 h-40 bg-white rounded-full blur-3xl"></div>
        </div>
        
        <div className="container mx-auto max-w-5xl relative z-10 animate-fade-in">
          <div className="text-center text-white">
            <h1 className="text-5xl md:text-6xl font-bold mb-6 tracking-tight">
              –ú–ê–¢–í–• & –ú–ê–¢–ï–ö–ê
            </h1>
            <p className="text-xl md:text-2xl mb-8 font-medium opacity-95">
              –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ª–∏–º–ø–∏–∞–¥–∞–º –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
            </p>
            <p className="text-lg md:text-xl mb-10 max-w-3xl mx-auto opacity-90">
              –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤–µ–ª–∏—á–∏–Ω: –º–∞—Å—Å—ã, –¥–ª–∏–Ω—ã, –≤—Ä–µ–º–µ–Ω–∏, –æ–±—ä—ë–º–∞, –ø–ª–æ—â–∞–¥–∏. 
              –†–µ—à–∞–π –∑–∞–¥–∞—á–∏, –ø—Ä–æ–≤–µ—Ä—è–π –æ—Ç–≤–µ—Ç—ã –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫ –æ–ª–∏–º–ø–∏–∞–¥–∞–º –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!
            </p>
            
            <div className="flex flex-wrap gap-6 justify-center items-center">
              <div className="flex items-center gap-3 bg-white/20 backdrop-blur-sm rounded-xl px-6 py-3">
                <Icon name="Calculator" size={28} className="text-white" />
                <span className="font-semibold text-lg">8 –∑–∞–¥–∞–Ω–∏–π</span>
              </div>
              <div className="flex items-center gap-3 bg-white/20 backdrop-blur-sm rounded-xl px-6 py-3">
                <Icon name="Ruler" size={28} className="text-white" />
                <span className="font-semibold text-lg">–í—Å–µ –≤–µ–ª–∏—á–∏–Ω—ã</span>
              </div>
              <div className="flex items-center gap-3 bg-white/20 backdrop-blur-sm rounded-xl px-6 py-3">
                <Icon name="Trophy" size={28} className="text-white" />
                <span className="font-semibold text-lg">3 —É—Ä–æ–≤–Ω—è</span>
              </div>
            </div>

            <Button 
              size="lg" 
              className="mt-10 bg-white text-primary hover:bg-white/90 text-lg px-8 py-6 rounded-full shadow-2xl hover:scale-105 transition-transform"
              onClick={() => document.getElementById('tasks')?.scrollIntoView({ behavior: 'smooth' })}
            >
              –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
              <Icon name="ArrowDown" size={20} className="ml-2" />
            </Button>
          </div>
        </div>
      </section>

      <section id="tasks" className="py-16 px-4">
        <div className="container mx-auto max-w-6xl">
          <div className="mb-10 animate-slide-up">
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-6 mb-8">
              <div>
                <h2 className="text-4xl font-bold mb-2 text-foreground">–ó–∞–¥–∞–Ω–∏—è</h2>
                <p className="text-muted-foreground text-lg">–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π –∫ —Ä–µ—à–µ–Ω–∏—é</p>
              </div>
              
              <Card className="w-full md:w-auto bg-card/80 backdrop-blur-sm border-2">
                <CardContent className="pt-6">
                  <div className="flex items-center gap-3 mb-2">
                    <Icon name="Target" size={24} className="text-primary" />
                    <span className="font-semibold text-lg">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                  </div>
                  <Progress value={progressPercent} className="h-3 mb-2" />
                  <p className="text-sm text-muted-foreground">
                    {completedCount} –∏–∑ {taskList.length} –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                  </p>
                </CardContent>
              </Card>
            </div>

            <div className="flex flex-wrap gap-3 mb-8">
              {difficulties.map((diff) => (
                <Button
                  key={diff}
                  variant={selectedDifficulty === diff ? 'default' : 'outline'}
                  onClick={() => setSelectedDifficulty(diff)}
                  className={`rounded-full px-6 transition-all ${
                    selectedDifficulty === diff 
                      ? 'bg-primary text-primary-foreground shadow-lg scale-105' 
                      : 'hover:scale-105'
                  }`}
                >
                  {difficultyLabels[diff]}
                </Button>
              ))}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {filteredTasks.map((task, index) => (
              <Card 
                key={task.id} 
                className={`hover:shadow-xl transition-all duration-300 animate-scale-in border-2 ${
                  task.completed 
                    ? 'bg-secondary/10 border-secondary' 
                    : 'hover:border-primary/50'
                }`}
                style={{ animationDelay: `${index * 0.1}s` }}
              >
                <CardHeader>
                  <div className="flex justify-between items-start mb-2">
                    <CardTitle className="text-xl">{task.title}</CardTitle>
                    {task.completed && (
                      <Icon name="CheckCircle" size={24} className="text-secondary" />
                    )}
                  </div>
                  <CardDescription className="flex items-center gap-2">
                    <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                      task.difficulty === 'Easy' 
                        ? 'bg-secondary/20 text-secondary' 
                        : task.difficulty === 'Medium'
                        ? 'bg-accent/40 text-accent-foreground'
                        : 'bg-primary/20 text-primary'
                    }`}>
                      {difficultyLabels[task.difficulty]}
                    </span>
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-foreground mb-6 leading-relaxed">{task.description}</p>
                  
                  <div className="space-y-3">
                    <Label htmlFor={`answer-${task.id}`} className="text-sm font-medium">
                      –¢–≤–æ–π –æ—Ç–≤–µ—Ç:
                    </Label>
                    <div className="flex gap-2">
                      <Input
                        id={`answer-${task.id}`}
                        type="text"
                        placeholder="–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç"
                        value={task.userAnswer || ''}
                        onChange={(e) => handleAnswerChange(task.id, e.target.value)}
                        disabled={task.completed}
                        className="flex-1"
                      />
                      <Button
                        onClick={() => checkAnswer(task.id)}
                        disabled={!task.userAnswer || task.completed}
                        className={task.completed ? 'bg-secondary' : ''}
                      >
                        {task.completed ? (
                          <>
                            <Icon name="Check" size={18} className="mr-1" />
                            –í–µ—Ä–Ω–æ
                          </>
                        ) : (
                          <>
                            <Icon name="Send" size={18} className="mr-1" />
                            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      <section className="py-16 px-4 bg-gradient-to-br from-secondary/5 to-primary/5">
        <div className="container mx-auto max-w-3xl">
          <Card className="shadow-2xl border-2 animate-fade-in">
            <CardHeader className="text-center">
              <CardTitle className="text-3xl font-bold mb-2 flex items-center justify-center gap-3">
                <Icon name="MessageSquare" size={32} className="text-primary" />
                –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
              </CardTitle>
              <CardDescription className="text-lg">
                –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleFeedbackSubmit} className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="name">–ò–º—è</Label>
                  <Input
                    id="name"
                    placeholder="–í–∞—à–µ –∏–º—è"
                    value={feedbackName}
                    onChange={(e) => setFeedbackName(e.target.value)}
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="your@email.com"
                    value={feedbackEmail}
                    onChange={(e) => setFeedbackEmail(e.target.value)}
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="message">–°–æ–æ–±—â–µ–Ω–∏–µ</Label>
                  <Textarea
                    id="message"
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ..."
                    value={feedbackMessage}
                    onChange={(e) => setFeedbackMessage(e.target.value)}
                    required
                    rows={5}
                    className="resize-none"
                  />
                </div>

                <Button 
                  type="submit" 
                  size="lg" 
                  className="w-full bg-secondary hover:bg-secondary/90 text-lg py-6"
                >
                  <Icon name="Send" size={20} className="mr-2" />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      </section>

      <footer className="bg-foreground/5 py-8 px-4 border-t">
        <div className="container mx-auto max-w-6xl text-center text-muted-foreground">
          <p className="text-sm">
            ¬© 2024 –ú–ê–¢–í–• & –ú–ê–¢–ï–ö–ê. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –æ–ª–∏–º–ø–∏–∞–¥–∞–º –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
          </p>
        </div>
      </footer>
    </div>
  );
};

export default Index;
